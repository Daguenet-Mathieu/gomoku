mvn package -Dmaven.test.skip=true
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m-------------------------< [0;36morg.openjfx:gomoku[0;1m >-------------------------[m
[[1;34mINFO[m] [1mBuilding gomoku 1.0.0[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/madaguen/github/Gomoku/final/gomoku/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.0:compile[m [1m(default-compile)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Not copying test resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.0:testCompile[m [1m(default-testCompile)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Not compiling test sources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Tests are skipped.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-jar-plugin:2.4:jar[m [1m(default-jar)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-assembly-plugin:2.4.1:single[m [1m(make-assembly)[m @ [36mgomoku[0;1m ---[m
[[1;34mINFO[m] Building jar: /home/madaguen/github/Gomoku/final/gomoku/target/gomoku-1.0.0-jar-with-dependencies.jar
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  1.169 s
[[1;34mINFO[m] Finished at: 2025-07-20T22:56:31+02:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
cp target/gomoku-1.0.0-jar-with-dependencies.jar gomoku.jar
java -jar gomoku.jar
on passe par ici constructeur home page
width : 1920 height : 1048 size : 1048
size x == 262 size y == 262
redimentionnement de home!!!!!!!!!!!!!!!!!1
redimentionnement de home!!!!!!!!!!!!!!!!!1
redimentionnement de home!!!!!!!!!!!!!!!!!1
redimentionnement de home!!!!!!!!!!!!!!!!!1
path == /home/madaguen/github/Gomoku/final/gomoku/sgf
parent == /home/madaguen/github/Gomoku/final/gomoku
style == -fx-background-color: white;
style == -fx-background-color: red;
value == /home/madaguen/github/Gomoku/final/gomoku/sgftestgf.sgf
file content == (;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Japanese]SZ[19]KM[0.00]
PW[White]PB[Black]
;B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 0 file == (;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Japanese]SZ[19]KM[0.00]
PW[White]PB[Black]
;B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 0 next char == ( file == ;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Japanese]SZ[19]KM[0.00]
PW[White]PB[Black]
;B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 1 file == ;GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Japanese]SZ[19]KM[0.00]
PW[White]PB[Black]
;B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 1 next char == ; file == GM[1]FF[4]CA[UTF-8]AP[CGoban:3]ST[2]
RU[Japanese]SZ[19]KM[0.00]
PW[White]PB[Black]
;B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == NUM_VALUEname : GM
NUm val pars ==  1
type == STRING_VALUEname : FF
type == STRING_VALUEname : CA
type == STRING_VALUEname : AP
type == STRING_VALUEname : ST
type == STRING_VALUEname : RU
type == NUM_VALUEname : SZ
NUm val pars ==  19
type == NUM_VALUEname : KM
NUm val pars ==  0.0
type == STRING_VALUEname : PW
type == STRING_VALUEname : PB
deepth == 1 next char == ; file == B[dd]
;W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 3
index x == 3
deepth == 1 next char == ; file == W[cc]
;B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 2
index x == 2
deepth == 1 next char == ; file == B[cd]
;W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 2
index x == 3
deepth == 1 next char == ; file == W[dc]
;B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 3
index x == 2
deepth == 1 next char == ; file == B[ec]
;W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 4
index x == 2
deepth == 1 next char == ; file == W[eb]
(;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 4
index x == 1
deepth == 1 next char == ( file == ;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 2 file == ;B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 2 next char == ; file == B[fb]
;W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 5
index x == 1
deepth == 2 next char == ; file == W[fc]
;B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 2
deepth == 2 next char == ; file == B[ed]
;W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 4
index x == 3
deepth == 2 next char == ; file == W[gb]
;B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 6
index x == 1
deepth == 2 next char == ; file == B[db]
(;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 3
index x == 1
deepth == 2 next char == ( file == ;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 3 file == ;W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 3 next char == ; file == W[fa])
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 0
deepth == 3 next char == ) file == 
(;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

next == null
next == org.ast.Node@25f36d64
deepth == 2 next char == ( file == ;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 3 file == ;W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 3 next char == ; file == W[cb]
;B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 2
index x == 1
deepth == 3 next char == ; file == B[da]
;W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 3
index x == 0
deepth == 3 next char == ; file == W[ca]
;B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 2
index x == 0
deepth == 3 next char == ; file == B[fa]
;W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 5
index x == 0
deepth == 3 next char == ; file == W[ga]
;B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 6
index x == 0
deepth == 3 next char == ; file == B[ea]
;W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 4
index x == 0
deepth == 3 next char == ; file == W[eb])
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 4
index x == 1
deepth == 3 next char == ) file == 
(;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

next == null
next == org.ast.Node@782066e1
deepth == 2 next char == ( file == ;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 3 file == ;W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 3 next char == ; file == W[fd]
;B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 3
deepth == 3 next char == ; file == B[cb]
;W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 2
index x == 1
deepth == 3 next char == ; file == W[fa]))
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 0
deepth == 3 next char == ) file == )
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

next == null
next == org.ast.Node@39797c78
deepth == 2 next char == ) file == 
(;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

next == null
next == org.ast.Node@335cb2bf
deepth == 1 next char == ( file == ;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 2 file == ;B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

deepth == 2 next char == ; file == B[fc]
;W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 5
index x == 2
deepth == 2 next char == ; file == W[fb]
;B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 1
deepth == 2 next char == ; file == B[gb])
(;B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 6
index x == 1
deepth == 2 next char == ) file == 
(;B[fd]
;W[fc]
;B[ed]))

next == null
next == org.ast.Node@d7a71fd
deepth == 1 next char == ( file == ;B[fd]
;W[fc]
;B[ed]))

je passe par (
deepth == 2 file == ;B[fd]
;W[fc]
;B[ed]))

deepth == 2 next char == ; file == B[fd]
;W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 5
index x == 3
deepth == 2 next char == ; file == W[fc]
;B[ed]))

je passe par ;
type == COORD_VALUEname : W
index y == 5
index x == 2
deepth == 2 next char == ; file == B[ed]))

je passe par ;
type == COORD_VALUEname : B
index y == 4
index x == 3
deepth == 2 next char == ) file == )

next == null
next == org.ast.Node@761609dd
deepth == 1 next char == ) file == 

next == org.ast.Node@4fe21db
next == org.ast.Node@4fe21db
tree == org.ast.Node@5261a2b1
Dans printTree, index = 1
→ Entering sub-branch (index = 0)
  Dans printTree, index = 1
  NUM: GM -> 1.0
  STR: FF -> 4
  STR: CA -> UTF-8
  STR: AP -> CGoban:3
  STR: ST -> 2
  STR: RU -> Japanese
  NUM: SZ -> 19.0
  NUM: KM -> 0.0
  STR: PW -> White
  STR: PB -> Black
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: B -> y=3, x=3
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: W -> y=2, x=2
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: B -> y=2, x=3
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: W -> y=3, x=2
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: B -> y=4, x=2
  → main branch detected, index = 1
  Dans printTree, index = 1
  COORD: W -> y=4, x=1
  → main branch detected, index = 1
  Dans printTree, index = 1
  → Entering sub-branch (index = 0)
    Dans printTree, index = 1
    COORD: B -> y=5, x=1
    → main branch detected, index = 1
    Dans printTree, index = 1
    COORD: W -> y=5, x=2
    → main branch detected, index = 1
    Dans printTree, index = 1
    COORD: B -> y=4, x=3
    → main branch detected, index = 1
    Dans printTree, index = 1
    COORD: W -> y=6, x=1
    → main branch detected, index = 1
    Dans printTree, index = 1
    COORD: B -> y=3, x=1
    → main branch detected, index = 1
    Dans printTree, index = 1
    → Entering sub-branch (index = 0)
      Dans printTree, index = 1
      COORD: W -> y=5, x=0
    → Sibling branch detected, new index = 2
    Dans printTree, index = 2
    → Entering sub-branch (index = 0)
      Dans printTree, index = 2
      COORD: W -> y=2, x=1
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: B -> y=3, x=0
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: W -> y=2, x=0
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: B -> y=5, x=0
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: W -> y=6, x=0
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: B -> y=4, x=0
      → main branch detected, index = 2
      Dans printTree, index = 2
      COORD: W -> y=4, x=1
    → Sibling branch detected, new index = 3
    Dans printTree, index = 3
    → Entering sub-branch (index = 0)
      Dans printTree, index = 3
      COORD: W -> y=5, x=3
      → main branch detected, index = 3
      Dans printTree, index = 3
      COORD: B -> y=2, x=1
      → main branch detected, index = 3
      Dans printTree, index = 3
      COORD: W -> y=5, x=0
  → Sibling branch detected, new index = 2
  Dans printTree, index = 2
  → Entering sub-branch (index = 0)
    Dans printTree, index = 2
    COORD: B -> y=5, x=2
    → main branch detected, index = 2
    Dans printTree, index = 2
    COORD: W -> y=5, x=1
    → main branch detected, index = 2
    Dans printTree, index = 2
    COORD: B -> y=6, x=1
  → Sibling branch detected, new index = 3
  Dans printTree, index = 3
  → Entering sub-branch (index = 0)
    Dans printTree, index = 3
    COORD: B -> y=5, x=3
    → main branch detected, index = 3
    Dans printTree, index = 3
    COORD: W -> y=5, x=2
    → main branch detected, index = 3
    Dans printTree, index = 3
    COORD: B -> y=4, x=3
index = 1
index = 1
set command : GM
set command : FF
set command : CA
set command : AP
set command : ST
set command : RU
set command : SZ
set command : KM
set command : PW
set command : PB
index = 1
set command : B
y == 3 x == 3
index = 1
set command : W
y == 2 x == 2
index = 1
set command : B
y == 2 x == 2
index = 1
set command : W
y == 3 x == 3
index = 1
set command : B
y == 4 x == 4
index = 1
set command : W
y == 4 x == 4
index = 1
index = 1
set command : B
y == 5 x == 5
index = 1
set command : W
y == 5 x == 5
index = 1
set command : B
y == 4 x == 4
index = 1
set command : W
y == 6 x == 6
index = 1
set command : B
y == 3 x == 3
index = 1
index = 1
set command : W
y == 5 x == 5
default rules reset sur string event
black is human
